var Graph={graph1:[],graph2:[],init:function(a,r,t){var e=$("#graphData");if(e.length){var i=JSON.parse(e.html());i&&r(i)}else $.ajax({dataType:"json",url:a,success:r,error:t})},sortGraph:function(a,r){function t(a,t){a=a[r],t=t[r];var e,i="string"==typeof a||"string"==typeof t?"string":"number";return e="string"===i?a.localeCompare(t):a-t}return a.sort(t)},filterGraphByDate:function(a,r){return $.grep(a,function(a){return""+a.date==""+r})},showGraph1:function(a){var r=AmCharts.makeChart("graph1",{type:"serial",addClassNames:!0,theme:"light",autoMargins:!1,marginLeft:30,marginRight:8,marginTop:10,marginBottom:26,balloon:{adjustBorderColor:!1,horizontalPadding:10,verticalPadding:8,color:"#ffffff"},dataProvider:a,valueAxes:[{axisAlpha:0,position:"left"}],startDuration:1,graphs:[{alphaField:"alpha",fillAlphas:1,title:"Value",type:"column",valueField:"value",dashLengthField:"dashLengthColumn"}],categoryField:"date",categoryAxis:{gridPosition:"start",axisAlpha:0,tickLength:0}});r.addListener("clickGraphItem",this.clickColumnEvent)},clickColumnEvent:function(a){Graph.showGraph2(Graph.filterGraphByDate(Graph.graph2,a.item.category))},showGraph2:function(a){var r=40;AmCharts.addInitHandler(function(a){var t=100,e=r+.1*r,i=document.getElementById("graph2");i.style.display="none";var n=a.dataProvider.length*(r+e)+t;i.style.overflow="visible",i.style.height=""+n+"px",setTimeout(function(){a.invalidateSize(),i.style.display="block"},1)},["serial"]);AmCharts.makeChart("graph2",{type:"serial",theme:"light",dataProvider:a,valueAxes:[{dashLength:0}],startDuration:1,balloon:{adjustBorderColor:!1,horizontalPadding:10,verticalPadding:8,color:"#ffffff"},graphs:[{title:"Code",type:"column",fillAlphas:.8,fixedColumnWidth:r,valueField:"code",dashLengthField:"dashLengthColumn"}],rotate:!0,categoryField:"description",categoryAxis:{gridAlpha:0,tickLength:0}})}};Graph.init("graph.json",function(a){void 0!==a.graph1&&void 0!==a.graph2?(Graph.graph1=Graph.sortGraph(a.graph1,"date"),Graph.graph2=Graph.sortGraph(a.graph2,"code"),Graph.showGraph1(Graph.graph1)):alert("json file must contain graph1[] and graph2[]")},function(a){alert("wrong json file")});
//# sourceMappingURL=data:application/json;base64,
